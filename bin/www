#!/usr/bin/env node

const app = require('../app');
const debug = require('debug')('backend-lapkin-presensi:server');
const http = require('http');
const https = require('https');
const fs = require('fs');
const net = require('net');

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

const server = http.createServer(app);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        return val;
    }

    if (port >= 0) {
        return port;
    }

    return false;
}

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

https.createServer({
    key: fs.readFileSync('/etc/letsencrypt/live/devsikagur.pringsewukab.go.id/privkey.pem'),
    cert: fs.readFileSync('/etc/letsencrypt/live/devsikagur.pringsewukab.go.id/fullchain.pem')
}, app).listen(443);

net.createServer(socket => {
    socket.on("error", err => {
        console.log("Caught flash policy server socket error: " + err.message)
        console.log(err.stack)
    })

    socket.write("<?xml version=\"1.0\"?>\n")
    socket.write("<!DOCTYPE cross-domain-policy SYSTEM \"https://www.macromedia.com/xml/dtds/cross-domain-policy.dtd\">\n")
    socket.write("<cross-domain-policy>\n")
    socket.write("<allow-access-from domain=\"*\" to-ports=\"*\"/>\n")
    socket.write("</cross-domain-policy>\n")
    socket.end()
}).listen(843)
